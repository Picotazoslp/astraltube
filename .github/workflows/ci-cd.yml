name: 'AstralTube CI/CD Pipeline'

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  CHROME_VERSION: 'latest'

jobs:
  # ============================================================================
  # Quality Assurance & Testing
  # ============================================================================
  quality-checks:
    name: 'Quality Checks'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run ESLint'
        run: npm run lint
        continue-on-error: false

      - name: 'Check Formatting'
        run: |
          npm run format
          git diff --exit-code || (echo "Code is not properly formatted. Run 'npm run format' to fix." && exit 1)

      - name: 'Type Checking'
        run: |
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit
          else
            echo "No TypeScript config found, skipping type check"
          fi

      - name: 'Security Audit'
        run: |
          npm audit --audit-level=moderate
          npx better-npm-audit audit --level moderate

  # ============================================================================
  # Unit & Integration Testing
  # ============================================================================
  test:
    name: 'Tests'
    runs-on: ubuntu-latest
    needs: quality-checks
    
    strategy:
      matrix:
        node-version: ['18', '20']
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js ${{ matrix.node-version }}'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run Unit Tests'
        run: npm test -- --coverage --watchAll=false

      - name: 'Upload Coverage to Codecov'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # Extension Building & Packaging
  # ============================================================================
  build:
    name: 'Build Extension'
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    
    outputs:
      version: ${{ steps.package-version.outputs.version }}
      build-hash: ${{ steps.build-hash.outputs.hash }}
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Get Package Version'
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: 'Build Extension (Production)'
        run: npm run build
        env:
          NODE_ENV: production

      - name: 'Run Bundle Analysis'
        run: npm run analyze

      - name: 'Package Extension'
        run: npm run package

      - name: 'Generate Build Hash'
        id: build-hash
        run: echo "hash=$(find dist -type f -exec sha256sum {} + | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: 'Upload Build Artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: extension-build-${{ steps.package-version.outputs.version }}
          path: |
            dist/
            packages/
          retention-days: 30

      - name: 'Upload Bundle Analysis'
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ steps.package-version.outputs.version }}
          path: dist/analysis/
          retention-days: 7

  # ============================================================================
  # Chrome Extension Testing
  # ============================================================================
  chrome-test:
    name: 'Chrome Extension Tests'
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Chrome'
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: ${{ env.CHROME_VERSION }}

      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: extension-build-${{ needs.build.outputs.version }}

      - name: 'Test Extension Loading'
        run: |
          # Start Chrome in headless mode and test extension loading
          google-chrome --version
          
          # Validate manifest
          if ! cat dist/manifest.json | python -m json.tool > /dev/null; then
            echo "Invalid manifest.json"
            exit 1
          fi
          
          # Check required files exist
          required_files=("dist/src/background/service-worker.js" "dist/src/content/content-script.js" "dist/src/popup/popup.js")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Missing required file: $file"
              exit 1
            fi
          done
          
          echo "Extension validation passed!"

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run Snyk Security Scan'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: 'Run CodeQL Analysis'
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v3

      - name: 'SARIF Upload'
        uses: github/codeql-action/upload-sarif@v3
        if: always()

  # ============================================================================
  # Deploy to Chrome Web Store (Release Only)
  # ============================================================================
  deploy-chrome-store:
    name: 'Deploy to Chrome Web Store'
    runs-on: ubuntu-latest
    needs: [build, chrome-test, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    environment:
      name: production
      url: https://chrome.google.com/webstore/detail/${{ vars.CHROME_EXTENSION_ID }}
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: extension-build-${{ needs.build.outputs.version }}

      - name: 'Deploy to Chrome Web Store'
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: packages/astraltube-${{ needs.build.outputs.version }}.zip
          extension-id: ${{ vars.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          publish: true

      - name: 'Create Deployment Summary'
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 Chrome Web Store Deployment
          
          - **Extension**: AstralTube v${{ needs.build.outputs.version }}
          - **Build Hash**: \`${{ needs.build.outputs.build-hash }}\`
          - **Store URL**: https://chrome.google.com/webstore/detail/${{ vars.CHROME_EXTENSION_ID }}
          - **Deployment Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### 📊 Build Analysis
          Check the [bundle analysis artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for performance insights.
          EOF

  # ============================================================================
  # Release Management
  # ============================================================================
  create-github-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    needs: [build, chrome-test]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: extension-build-${{ needs.build.outputs.version }}

      - name: 'Generate Changelog'
        id: changelog
        run: |
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          cat > release-notes.md << EOF
          ## What's New in v${{ needs.build.outputs.version }}
          
          ### Changes
          $COMMITS
          
          ### Installation
          Download the extension package and load it in Chrome's developer mode, or wait for Chrome Web Store approval.
          
          ### Build Information
          - Build Hash: \`${{ needs.build.outputs.build-hash }}\`
          - Node.js: ${{ env.NODE_VERSION }}
          - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF

      - name: 'Create Release'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: 'AstralTube v${{ needs.build.outputs.version }}'
          body_path: release-notes.md
          files: |
            packages/astraltube-${{ needs.build.outputs.version }}.zip
            dist/analysis/bundle-analysis.json
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}

  # ============================================================================
  # Notification & Monitoring
  # ============================================================================
  notify:
    name: 'Notifications'
    runs-on: ubuntu-latest
    needs: [deploy-chrome-store, create-github-release]
    if: always()
    
    steps:
      - name: 'Deployment Success Notification'
        if: needs.deploy-chrome-store.result == 'success'
        run: |
          echo "🎉 AstralTube successfully deployed to Chrome Web Store!"
          # Add webhook notifications here if needed

      - name: 'Deployment Failure Notification'
        if: failure()
        run: |
          echo "❌ Deployment failed. Please check the logs."
          # Add failure notifications here if needed